name: deploy_production_to_k8s

on:
  workflow_dispatch:
    inputs:
      SKIP_BUILD:
        description: 'Skip build and push phase'
        required: false
        type: boolean
        default: false
      SKIP_DEPLOY_STAGING:
        description: 'Skip deployment to staging'
        required: false
        type: boolean
        default: false
  repository_dispatch:
    types: ["trigger-wf-deployProduction2K8S"]

concurrency:
  group: ${{ github.workflow }}
  cancel-in-progress: false

permissions:
  contents: write

jobs:

  build-image-push:
    if: ${{ inputs.SKIP_BUILD == false }}
    uses: v6Org01/.github/.github/workflows/BuildPushImage.yaml@main
    with:
      APPLICATION: ${{ vars.APPLICATION }}
      VERSION: ${{ vars.DUO_VERSION }}
      PUSH_TO_PUBLIC: true
      PUSH_TO_PRIVATE: true
      WF_OWNER: ${{ vars.OWNER }}
      WF_REGISTRY_PRIVATE: ${{ vars.REGISTRY_PRIVATE }}
      WF_REGISTRY_PRIVATE_PULL: ${{ vars.REGISTRY_PRIVATE_PULL }}
      WF_REGISTRY_PUBLIC: ${{ vars.REGISTRY_PUBLIC }}
    secrets:
      WF_REGISTRY_PRIVATE_USER: ${{ secrets.REGISTRY_PRIVATE_USER01 }}
      WF_REGISTRY_PRIVATE_PASSWD: "${{ secrets.REGISTRY_PRIVATE_USER01_PASSWD }}"
      WF_REGISTRY_PUBLIC_USER: ${{ github.actor }}
      WF_REGISTRY_PUBLIC_PASSWD: ${{ secrets.PAT_PACKAGES }}

  deploy-staging:
    if: ${{ !failure() && inputs.SKIP_DEPLOY_STAGING == false }}
    environment: staging
    runs-on: gha-runner-scale-set-arm64
    needs: build-image-push
    steps:
      - name: Install openssh-client
        run: |
          sudo apt-get update -y
          sudo apt-get install openssh-client -y
          sudo rm -rf /var/lib/apt/lists/*
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ssh-key: ${{ secrets.DEPLOY_PRIVATE_KEY }} # needed to bypass branch protection
      - name: Update image tag and deploy app with ArgoCD
        uses: v6Org01/.github/actions/update-imageTag-argoDeploy@main
        with:
          ARGOCD_APPLICATION_FILE: ${{ vars.ARGOCD_APPLICATION_FILE }}
          KUBECONFIG: ${{ secrets.KUBECONFIG_PLUTO_STAGING }}
          NAMESPACE: ${{ vars.NAMESPACE }}
          VERSION: ${{ vars.DUO_VERSION }}

  smoke-test-staging:
    if: ${{ !failure() && inputs.SKIP_DEPLOY_STAGING == false }}
    runs-on: gha-runner-scale-set-arm64
    needs: deploy-staging
    steps:
      - name: Install netcat
        run: |
          sudo apt-get update -y
          sudo apt-get install netcat -y
          sudo rm -rf /var/lib/apt/lists/*
      - name: Test connectivity to port 389
        id: check-port
        run: |
          if nc -zv duoauthproxy-ldap.staging.svc.cluster.local 389; then
              echo "result=success" >> $GITHUB_OUTPUT
          else
              echo "result=failure" >> $GITHUB_OUTPUT
              exit 1
          fi

  deploy-production:
    if: '!failure()'
    environment: production
    runs-on: gha-runner-scale-set-arm64
    needs: smoke-test-staging
    outputs:
      CURRENT_TAG: ${{ steps.capture-tag.outputs.CURRENT_TAG }}
    steps:
      - name: Install openssh-client
        run: |
          sudo apt-get update -y
          sudo apt-get install openssh-client -y
          sudo rm -rf /var/lib/apt/lists/*
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ssh-key: ${{ secrets.DEPLOY_PRIVATE_KEY }}
      - name: Capture current image.tag
        id: capture-tag
        run: |
          echo "CURRENT_TAG=$(grep 'name: "image.tag"' ${{ vars.ARGOCD_APPLICATION_FILE }} -A 1 | sed -n 's/.*value:[[:space:]]*"\(.*\)"/\1/p')" >> $GITHUB_OUTPUT
      - name: Update image tag and deploy app with ArgoCD
        uses: v6Org01/.github/actions/update-imageTag-argoDeploy@main
        with:
          ARGOCD_APPLICATION_FILE: ${{ vars.ARGOCD_APPLICATION_FILE }}
          KUBECONFIG: ${{ secrets.KUBECONFIG_PLUTO_CORE }}
          NAMESPACE: ${{ vars.NAMESPACE }}
          VERSION: ${{ vars.DUO_VERSION }}

  functional-test-production:
    if: '!failure()'
    environment: production
    runs-on: gha-runner-scale-set-arm64
    needs: deploy-production
    steps:
      - name: Install openldap-clients
        run: |
          sudo apt-get update -y
          sudo apt-get install ldap-utils -y
          sudo rm -rf /var/lib/apt/lists/*
      - name: Run LDAP query against DUO/LLDAP
        id: check-ldap
        run: |
          if ldapsearch -x -H ldap://duoauthproxy-ldap.core.svc.cluster.local:389 -b "${{ vars.LDAP_BASEDN }}" -D "${{ vars.DUO_LDAP_USER }}" -w '${{ secrets.DUO_LDAP_USER_PASSWD }}' | grep -q "result: 0 Success"; then
            echo "result=success" >> $GITHUB_OUTPUT
          else
            echo "result=failure" >> $GITHUB_OUTPUT
            exit 1
          fi

  revert-prod-to-previous-version:
    if: ${{ always() && needs.functional-test-production.result == 'failure' }}
    environment: production
    runs-on: gha-runner-scale-set-arm64
    needs: functional-test-production
    steps:
      - name: Install openssh-client
        run: |
          sudo apt-get update -y
          sudo apt-get install openssh-client -y
          sudo rm -rf /var/lib/apt/lists/*
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ssh-key: ${{ secrets.DEPLOY_PRIVATE_KEY }}
      - name: Update image tag and deploy app with ArgoCD
        uses: v6Org01/.github/actions/update-imageTag-argoDeploy@main
        with:
          ARGOCD_APPLICATION_FILE: ${{ vars.ARGOCD_APPLICATION_FILE }}
          KUBECONFIG: ${{ secrets.KUBECONFIG_PLUTO_CORE }}
          NAMESPACE: ${{ vars.NAMESPACE }}
          VERSION: ${{ needs.deploy-production.outputs.CURRENT_TAG }}

  destroy-staging:
    if: ${{ always() && needs.functional-test-production.result == 'success' }}
    runs-on: gha-runner-scale-set-arm64
    needs: functional-test-production
    steps:
      - name: K8S - Install kubectl
        uses: azure/setup-kubectl@v4
      - name: K8S - Set Context
        uses: azure/k8s-set-context@v4
        with:
          method: kubeconfig
          kubeconfig: ${{ secrets.KUBECONFIG_PLUTO_STAGING }}
      - name: Delete ArgoCD Application
        run: |
          kubectl delete applications.argoproj.io ${{ vars.APPLICATION }} -n staging
      - name: Wait a minute for resources to be pruned
        run: |
          sleep 60
      - name: Confirm resources have been deleted
        run: |
          if kubectl get po -n staging | grep ${{ vars.APPLICATION }}; then
            echo "Pod with name containing ${{ vars.APPLICATION }} still exists."
            exit 1
          else
            echo "No pod with name containing ${{ vars.APPLICATION }} found."
          fi
